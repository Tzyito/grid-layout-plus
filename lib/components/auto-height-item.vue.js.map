{"version":3,"file":"auto-height-item.vue.js","sources":["../../src/components/auto-height-item.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue'\n\nimport { useResizeObserver } from '@vueuse/core'\nimport GridItem from './grid-item.vue'\n\nconst props = defineProps({\n  isDraggable: {\n    type: Boolean,\n    default: null\n  },\n  isResizable: {\n    type: Boolean,\n    default: null\n  },\n  isBounded: {\n    type: Boolean,\n    default: null\n  },\n  static: {\n    type: Boolean,\n    default: false\n  },\n  minH: {\n    type: Number,\n    default: 1\n  },\n  minW: {\n    type: Number,\n    default: 1\n  },\n  maxH: {\n    type: Number,\n    default: Infinity\n  },\n  maxW: {\n    type: Number,\n    default: Infinity\n  },\n  x: {\n    type: Number,\n    required: true\n  },\n  y: {\n    type: Number,\n    required: true\n  },\n  w: {\n    type: Number,\n    required: true\n  },\n  h: {\n    type: Number,\n    required: true\n  },\n  i: {\n    type: [Number, String],\n    required: true\n  },\n  dragIgnoreFrom: {\n    type: String,\n    default: 'a, button'\n  },\n  dragAllowFrom: {\n    type: String,\n    default: null\n  },\n  resizeIgnoreFrom: {\n    type: String,\n    default: 'a, button'\n  },\n  preserveAspectRatio: {\n    type: Boolean,\n    default: false\n  },\n  dragOption: {\n    type: Object,\n    default: () => ({})\n  },\n  resizeOption: {\n    type: Object,\n    default: () => ({})\n  },\n  rowHeight: {\n    type: Number,\n    default: 30\n  },\n  margin: {\n    type: Array,\n    default: () => [10, 10]\n  }\n})\n\nconst emit = defineEmits(['update:h'])\n\nconst contentRef = ref(null)\nconst contentHeight = ref(0)\n\nconst calculatedRows = computed(() => {\n  if (contentHeight.value <= 0) return props.minH\n\n  const marginY = props.margin[1] as number\n  const rows = Math.ceil((contentHeight.value + marginY) / (props.rowHeight + marginY))\n\n  return Math.min(Math.max(rows, props.minH), props.maxH)\n})\n\nuseResizeObserver(contentRef, entries => {\n  const entry = entries[0]\n  if (entry) {\n    contentHeight.value = entry.contentRect.height\n  }\n})\n\nwatch(\n  () => calculatedRows.value,\n  newRows => {\n    if (newRows !== props.h) {\n      emit('update:h', newRows)\n    }\n  }\n)\n</script>\n\n<template>\n  <GridItem v-bind=\"{ ...props }\">\n    <div ref=\"contentRef\">\n      <slot></slot>\n    </div>\n  </GridItem>\n</template>\n"],"names":["props","__props","emit","__emit","contentRef","ref","contentHeight","calculatedRows","computed","marginY","rows","useResizeObserver","entries","entry","watch","newRows"],"mappings":"07BAMA,MAAMA,EAAQC,EAuFRC,EAAOC,EAEPC,EAAaC,MAAI,IAAI,EACrBC,EAAgBD,MAAI,CAAC,EAErBE,EAAiBC,EAAAA,SAAS,IAAM,CACpC,GAAIF,EAAc,OAAS,EAAG,OAAON,EAAM,KAErC,MAAAS,EAAUT,EAAM,OAAO,CAAC,EACxBU,EAAO,KAAK,MAAMJ,EAAc,MAAQG,IAAYT,EAAM,UAAYS,EAAQ,EAE7E,OAAA,KAAK,IAAI,KAAK,IAAIC,EAAMV,EAAM,IAAI,EAAGA,EAAM,IAAI,CAAA,CACvD,EAEDW,OAAAA,oBAAkBP,EAAuBQ,GAAA,CACjC,MAAAC,EAAQD,EAAQ,CAAC,EACnBC,IACYP,EAAA,MAAQO,EAAM,YAAY,OAC1C,CACD,EAEDC,EAAA,MACE,IAAMP,EAAe,MACVQ,GAAA,CACLA,IAAYf,EAAM,GACpBE,EAAK,WAAYa,CAAO,CAC1B,CAEJ"}