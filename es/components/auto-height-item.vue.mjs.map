{"version":3,"file":"auto-height-item.vue.mjs","sources":["../../src/components/auto-height-item.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue'\n\nimport { useResizeObserver } from '@vueuse/core'\nimport GridItem from './grid-item.vue'\n\nconst props = defineProps({\n  isDraggable: {\n    type: Boolean,\n    default: null\n  },\n  isResizable: {\n    type: Boolean,\n    default: null\n  },\n  isBounded: {\n    type: Boolean,\n    default: null\n  },\n  static: {\n    type: Boolean,\n    default: false\n  },\n  minH: {\n    type: Number,\n    default: 1\n  },\n  minW: {\n    type: Number,\n    default: 1\n  },\n  maxH: {\n    type: Number,\n    default: Infinity\n  },\n  maxW: {\n    type: Number,\n    default: Infinity\n  },\n  x: {\n    type: Number,\n    required: true\n  },\n  y: {\n    type: Number,\n    required: true\n  },\n  w: {\n    type: Number,\n    required: true\n  },\n  h: {\n    type: Number,\n    required: true\n  },\n  i: {\n    type: [Number, String],\n    required: true\n  },\n  dragIgnoreFrom: {\n    type: String,\n    default: 'a, button'\n  },\n  dragAllowFrom: {\n    type: String,\n    default: null\n  },\n  resizeIgnoreFrom: {\n    type: String,\n    default: 'a, button'\n  },\n  preserveAspectRatio: {\n    type: Boolean,\n    default: false\n  },\n  dragOption: {\n    type: Object,\n    default: () => ({})\n  },\n  resizeOption: {\n    type: Object,\n    default: () => ({})\n  },\n  rowHeight: {\n    type: Number,\n    default: 30\n  },\n  margin: {\n    type: Array,\n    default: () => [10, 10]\n  }\n})\n\nconst emit = defineEmits(['update:h'])\n\nconst contentRef = ref<HTMLDivElement | null>(null)\nconst contentHeight = ref(0)\n\nconst calculatedRows = computed(() => {\n  if (contentHeight.value <= 0) return props.minH\n  const marginY = props.margin[1] as number\n  const rows = Math.ceil((contentHeight.value + marginY) / (props.rowHeight + marginY))\n  return Math.min(Math.max(rows, props.minH), props.maxH)\n})\n\nconst observer = useResizeObserver(contentRef, entries => {\n  const entry = entries[0]\n  if (entry) {\n    contentHeight.value = entry.contentRect.height\n  }\n})\nwatch(\n  () => calculatedRows.value,\n  newRows => {\n    if (newRows !== props.h) {\n      emit('update:h', newRows)\n    }\n  }\n)\n\nonMounted(() => {\n  if (contentRef.value) {\n    const height = contentRef.value.clientHeight\n    if (height > 0) {\n      contentHeight.value = height\n    }\n  }\n})\nonBeforeUnmount(() => {\n  observer && observer.stop()\n})\n</script>\n\n<template>\n  <GridItem v-bind=\"{ ...props }\">\n    <div ref=\"contentRef\">\n      <slot></slot>\n    </div>\n  </GridItem>\n</template>\n"],"names":["props","__props","emit","__emit","contentRef","ref","contentHeight","calculatedRows","computed","marginY","rows","observer","useResizeObserver","entries","entry","watch","newRows","onMounted","height","onBeforeUnmount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,UAAMA,IAAQC,GAuFRC,IAAOC,GAEPC,IAAaC,EAA2B,IAAI,GAC5CC,IAAgBD,EAAI,CAAC,GAErBE,IAAiBC,EAAS,MAAM;AACpC,UAAIF,EAAc,SAAS,EAAG,QAAON,EAAM;AACrC,YAAAS,IAAUT,EAAM,OAAO,CAAC,GACxBU,IAAO,KAAK,MAAMJ,EAAc,QAAQG,MAAYT,EAAM,YAAYS,EAAQ;AAC7E,aAAA,KAAK,IAAI,KAAK,IAAIC,GAAMV,EAAM,IAAI,GAAGA,EAAM,IAAI;AAAA,IAAA,CACvD,GAEKW,IAAWC,EAAkBR,GAAY,CAAWS,MAAA;AAClD,YAAAC,IAAQD,EAAQ,CAAC;AACvB,MAAIC,MACYR,EAAA,QAAQQ,EAAM,YAAY;AAAA,IAC1C,CACD;AACD,WAAAC;AAAA,MACE,MAAMR,EAAe;AAAA,MACrB,CAAWS,MAAA;AACL,QAAAA,MAAYhB,EAAM,KACpBE,EAAK,YAAYc,CAAO;AAAA,MAC1B;AAAA,IAEJ,GAEAC,EAAU,MAAM;AACd,UAAIb,EAAW,OAAO;AACd,cAAAc,IAASd,EAAW,MAAM;AAChC,QAAIc,IAAS,MACXZ,EAAc,QAAQY;AAAA,MACxB;AAAA,IACF,CACD,GACDC,EAAgB,MAAM;AACpB,MAAAR,KAAYA,EAAS,KAAK;AAAA,IAAA,CAC3B;;;;;;;;;;;;;"}